local a, b;

a := arg[1];
b := arg[2];

# would be nice if "a+b" was available as both string and evaluated value

AddTestCase("plus", function()
	AssertEqual( a, 1 * a );
	AssertEqual( a + a, 2 * a );
	# Commutative, associative
	AssertEqual( a + b, b + a );
	AssertEqual( (a + b) + a, a + (b + a) );
end);

AddTestCase("ainv", function()
	AssertEqual( -(-a), a );
	AssertEqual( -(a+b), -a - b );
	AssertEqual( -a, (-1) * a );
	AssertTrue( IsZero( a + (-a) ) );
end);

AddTestCase("zero", function()
	# is zero neutral and idempotent?
	AssertEqual( a + Zero(a), a );
	AssertEqual( Zero(a) + Zero(a), Zero(a) );
	AssertEqual( Zero(Zero(a)), Zero(a) );
	# Some alternative ways to produce zero
	AssertEqual( Zero( a ), a - a );
	AssertEqual( Zero( a ), 0 * a );
end);
